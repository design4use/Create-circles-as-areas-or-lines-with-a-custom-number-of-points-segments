//(c)2016 German Bauer. All code covered by the BSD 2-clause style license ./LICENSE.md in this package

var doc, pi, pArray, def, sv
var r, segs, idealsegs, vals, thickness, omit, stMaj, stMin, nMaj, nMin, dash, gap

var onRun = function(context) {
  // Global variables
  doc = context.document
  pi = Math.PI

  r = 100
  segs = idealsegs = 6
  vals = "40,30,20,10,5"
  thickness = 20
  omit = 0
  stMaj = 4
  stMin = 2
  nMaj = 12
  nMin = 4
  dash = 32
  gap = 16

  pArray = []
  def = [NSUserDefaults standardUserDefaults]
  sv = getSkVer()
  //actual functions
  //start()
}

//menu items system
var c_seg = function(context){onRun(context);start("seg")}
var c_var = function(context){onRun(context);start("var")}
var c_dsh = function(context){onRun(context);start("dsh")}
var c_tix = function(context){onRun(context);start("tix")}

var start = function(whichOne){
    //switch case which type of segmented circles
    switch (whichOne) {

      case "var":
        var key = "gb_segCircle_var" //retrieve value from defaults, if none set
        var sc = JSON.parse([def objectForKey:key]) || {el:[
                                                            {label: "Outer radius", data:r},
                                                            {label: "Values", data:vals},
                                                            {label: "Thickness", data:thickness},
                                                            {label: "Bottom cutout angle", data: omit}
                                                        ]}
        var inp = showDlg(
          "Variable Segments Circle",
          "Input radius, values and thickness.\nUse a thickness of 1 or less to create lines instead of areas. \n\nValues are a comma seperated list of numbers.",
          sc.el,
          "Create Circle")
        sc.el[0].data = parseInt(inp[0])
        sc.el[1].data = inp[1].split(",").join(",") //not sure why it only works this way
        sc.el[2].data = parseInt(inp[2])
        sc.el[3].data = parseInt(inp[3])
        [def setObject:JSON.stringify(sc) forKey:key]
        varSegmentCircle(sc.el[0].data, sc.el[1].data.split(","), sc.el[2].data, deg2rdns(sc.el[3].data))
      break;

      case "tix":
        var key = "gb_segCircle_tix" //retrieve value from defaults, if none set
        var sc = JSON.parse([def objectForKey:key]) || {el:[
                                                            {label: "Outer radius major ticks", data: r},
                                                            {label: "Outer radius minor ticks", data: r-5},
                                                            {label: "Major ticks", data: nMaj},
                                                            {label: "Minor ticks in between", data: nMin},
                                                            {label: "Major ticks stroke", data: stMaj},
                                                            {label: "Minor ticks stroke", data: stMin},
                                                            {label: "Major ticks length", data: thickness},
                                                            {label: "Minor ticks length", data: thickness/2},
                                                            {label: "Bottom cutout angle", data: omit}
                                                        ]}
        var inp = showDlg(
          "Ticks Circle",
          "Input values for major and minor ticks.",
          sc.el,
          "Create Circle")
        sc.el[0].data = parseInt(inp[0])
        sc.el[1].data = parseInt(inp[1])
        sc.el[2].data = parseInt(inp[2])
        sc.el[3].data = parseInt(inp[3])
        sc.el[4].data = parseInt(inp[4])
        sc.el[5].data = parseInt(inp[5])
        sc.el[6].data = parseInt(inp[6])
        sc.el[7].data = parseInt(inp[7])
        sc.el[8].data = parseInt(inp[8])
        [def setObject:JSON.stringify(sc) forKey:key]
        ticksCircle(sc.el[0].data, sc.el[1].data, sc.el[2].data, sc.el[3].data, sc.el[4].data, sc.el[5].data, sc.el[6].data, sc.el[7].data, deg2rdns(sc.el[8].data))
      break;

      case "dsh":
        var key = "gb_segCircle_dsh" //retrieve value from defaults, if none set
        var sc = JSON.parse([def objectForKey:key]) || {el:[
                                                            {label: "Outer radius", data: r},
                                                            {label: "Length of dashes", data: dash},
                                                            {label: "Length of gaps", data: gap},
                                                            {label: "Thickness", data: nMin}
                                                        ]}
        var inp = showDlg(
          "Circle with dashes",
          "Input values for outer radius, lengths of dashes and gaps and thickness.\nUse a thickness of 1 or less to create lines instead of areas.",
          sc.el,
          "Create Circle")
        sc.el[0].data = parseInt(inp[0])
        sc.el[1].data = parseInt(inp[1])
        sc.el[2].data = parseInt(inp[2])
        sc.el[3].data = parseInt(inp[3])
        [def setObject:JSON.stringify(sc) forKey:key]
        dashedCircle(sc.el[0].data, sc.el[1].data, sc.el[2].data, sc.el[3].data)
      break;

      default:
        var key = "gb_segCircle_seg" //retrieve value from defaults, if none set
        var sc = JSON.parse([def objectForKey:key]) || {el:[
                                                            {label: "Outer radius", data: r},
                                                            {label: "Number of segments", data: segs},
                                                            {label: "Thickness", data: thickness},
                                                            {label: "Bottom cutout angle", data: omit}
                                                        ]}
        var inp = showDlg(
          "Segmented circle",
          "Input values for outer radius, number of segments, thickness etc. \nUse a thickness of 1 or less to create lines instead of areas.",
          sc.el,
          "Create Circle")
        sc.el[0].data = parseInt(inp[0])
        sc.el[1].data = parseInt(inp[1])
        sc.el[2].data = parseInt(inp[2])
        sc.el[3].data = parseInt(inp[3])
        [def setObject:JSON.stringify(sc) forKey:key]
        segmentCircle(sc.el[0].data, sc.el[1].data, sc.el[2].data, deg2rdns(sc.el[3].data))
    }

    //varSegmentCircle([50,30,20])
    //varSegmentCircle(100, [40,30,20,10,5], 24, 2 * pi / 3)//debug
    //dashedCircle(100, 80, 40, 1)//debug
    //ticksCircle(100, 84, 8, 4, 4, 4, 4, 20, deg2rdns(120))//debug
}

var segmentCircle = function(rCirc, numSegs, nThick, angOmit){
  var gr = doc.currentPage().addLayerOfType("group")
  var c = getRnCol()
  gr.setName("Segments circle")
  var bP = makeBasePlate(rCirc, nThick)
  gr.addLayers([bP])

  var angRange = 2 * pi - angOmit
  var angCor = (angOmit > 0) ? pi - (angOmit / 2) : 0 //rotate the circle to have the gap on bottom
  var angSeg = angRange / numSegs

  for(var i = 0; i < numSegs; i++){
    var shape = makeArcSeg(angSeg * i - angCor, angSeg * (i + 1) - angCor, rCirc, nThick)
    if (nThick > 1) {styleShapeArea(shape, c)} else {styleShape(shape, c)}
    shape.setName("Segment " + (i + 1))
    gr.addLayers([shape]);
  }
  placeLayer(gr)
}

var varSegmentCircle = function(rCirc, aSegments, nThick, angOmit){
  var numSegs = aSegments.length
  var aSegs = preProcSeg(aSegments, angOmit)
  var angCor = (angOmit > 0) ? pi - (angOmit / 2) : 0 //rotate the circle to have the gap on bottom

  var gr = doc.currentPage().addLayerOfType("group")
  gr.setName("Variable segments circle")
  var bP = makeBasePlate(rCirc, nThick)
  gr.addLayers([bP])
  var aUsedCols = []
  for(var i = 0; i < numSegs; i++){
    var shape = makeArcSeg(aSegs[i] - angCor, aSegs[i + 1] - angCor, rCirc, nThick)
    if (nThick > 1) {styleShapeArea(shape,getRnCol(aUsedCols))} else {styleShape(shape,getRnCol(aUsedCols))}
    shape.setName("Segment " + (aSegments[i]))
    gr.addLayers([shape]);
  }
  placeLayer(gr)
}

var ticksCircle = function(rOutMaj, rOutMin, numMaj, numMin, nStrkMaj, nStrkMin, nThickMaj, nThickMin, angOmit) {
  //creates minor and major tickmarks along a circle minus the cutout angOmit
  var gr = doc.currentPage().addLayerOfType("group")
  var c1 = getRnCol()
  var c2 = getNeutralColor()
  gr.setName("Tickmarks circle")
  if (numMin > 0){
    var grMin = gr.addLayerOfType("group")
    grMin.setName("Minor tickmarks")
    var bPMin = makeBasePlate(rOutMin, nThickMin)
    grMin.addLayers([bPMin])
  }
  var grMaj = gr.addLayerOfType("group")
  grMaj.setName("Major tickmarks")
  var bPMaj = makeBasePlate(rOutMaj, nThickMaj)
  grMaj.addLayers([bPMaj])

  var angRange = 2 * pi - angOmit
  var angCor = (angOmit > 0) ? pi - (angOmit / 2) : 0 //rotate the circle to have the gap on bottom
  var nExtra = (angOmit > 0) ? 1 : 0 //draw an extra closing one if circle is open
  var cf = angRange * rOutMaj
  var angPx = angRange / Math.round(cf)
  var angDistTick = angRange / ((numMaj - nExtra) * (numMin + 1))
  for(var i = 0; i < numMaj; i++){
    var a = (i * (numMin + 1)) * angDistTick - angCor
    var shape = makeArcSeg(a - ((nStrkMaj/2) * angPx) , a + ((nStrkMaj/2) * angPx), rOutMaj, nThickMaj)
    if (nThickMaj > 1) {styleShapeArea(shape,c1)} else {styleShape(shape,c1)}
    shape.setName("Tick major " + (i * (numMin + 1)))
    grMaj.addLayers([shape]);

    if(numMin >= 1 && (i < (numMaj - nExtra))){
      var ub = (i == (numMaj + nExtra - 2)) ? numMin + 2 : numMin + 1 // last minor tick under the last major one
      for(var j = 0; j < ub; j++){
        var a = ((i * (numMin + 1)) + j) * angDistTick - angCor
        var shape = makeArcSeg(a - ((nStrkMin/2) * angPx) , a + ((nStrkMin/2) * angPx), rOutMin, nThickMin)
        if (nThickMin > 1) {styleShapeArea(shape,c2)} else {styleShape(shape,c2)}
        shape.setName("Tick minor " + (((i * (numMin + 1)) + j) + 0))
        grMin.addLayers([shape]);
      }
    }
  }
  rszHndls(grMaj)
  rszHndls(grMin)
  placeLayer(gr)
}

var dashedCircle = function(rCirc, lDash, lGap, nThick) {
  //creates dashing along the circle circumference
  //optmize dash/gap size for even dashes
  var cf = 2 * pi * rCirc
  var lSeg = lGap + lDash
  var numSegs = Math.max(4, Math.floor(cf / lSeg))
  var angSeg = 2 * pi / numSegs
  var angDash = angSeg * lDash / lSeg
  var angGap = angSeg - angDash

  var gr = doc.currentPage().addLayerOfType("group")
  gr.setName("Dashed circle")
  var bP = makeBasePlate(rCirc, nThick)
  gr.addLayers([bP])

  var c = getRnCol()
  for(var i = 0; i < numSegs; i++){
    var shape = makeArcSeg(angSeg * i, (angSeg * i) + angDash, rCirc, nThick)
    if (nThick > 1) {styleShapeArea(shape, c)} else {styleShape(shape, c)}
    shape.setName("Dash " + i)
    gr.addLayers([shape])

  }
  placeLayer(gr)
}


//*********** util functions ***********//

var computeBezierArc = function(angStart, angEnd, rSeg){
  //compute single segment with start and end angle and radius
  var lSeg = angEnd - angStart
  var lCpHandle = rSeg * 4 / 3 * (Math.tan(lSeg / 4))
  //alert("length of cp handle is " + lCpHandle, "Test")
  var aGeomFactor = [Math.cos(angStart - pi/2), Math.sin(angStart - pi/2)]
  var pAnchor1 = 		[rd2dec(aGeomFactor[0] * rSeg), rd2dec(aGeomFactor[1] * rSeg)]
  var pLe1 =        [pAnchor1[0] - rd2dec(aGeomFactor[1] * lCpHandle), pAnchor1[1] + rd2dec(aGeomFactor[0] * lCpHandle)]
  var pRi1 =        [pAnchor1[0] + rd2dec(aGeomFactor[1] * lCpHandle), pAnchor1[1] - rd2dec(aGeomFactor[0] * lCpHandle)]
  //alert("GFact1 is " + aGeomFactor, "Test")
  aGeomFactor =     [Math.cos(angEnd - pi/2), Math.sin(angEnd - pi/2)]
  var pAnchor2 =    [rd2dec(aGeomFactor[0] * rSeg), rd2dec(aGeomFactor[1] * rSeg)]
  var pLe2 =        [pAnchor2[0] - rd2dec(aGeomFactor[1] * lCpHandle), pAnchor2[1] + rd2dec(aGeomFactor[0] * lCpHandle)]
  var pRi2 =        [pAnchor2[0] + rd2dec(aGeomFactor[1] * lCpHandle), pAnchor2[1] - rd2dec(aGeomFactor[0] * lCpHandle)]

  return {aBeg:pAnchor1, cPt1:pLe1, cPt2:pRi2, aEnd:pAnchor2}
}

var computeLargeBezierArc = function(angStart, angEnd, rSeg){
  //return path points for n arcs > ideal segments
  var angIdeal = 2 * pi / idealsegs
  var nIdeal = Math.trunc((angEnd - angStart) / angIdeal)
  //var aRem = (angEnd - angStart) % angIdeal
  if(nIdeal < 0){angIdeal *= (-1);nIdeal *= (-1);}//CCW
  var aPts = []
  var angCurr = angStart
  for(i = 0; i < nIdeal + 1; i++){
    if(i < nIdeal) {
      aPts.push(computeBezierArc(angCurr, angCurr + angIdeal, rSeg))//fill with ideal sized segments
      angCurr += angIdeal
    } else {
      if(Math.abs(angEnd - angCurr) > 0.00001){ aPts.push(computeBezierArc(angCurr, angEnd, rSeg))} //end with smaller sized remainder
    }
  }
  return aPts;
}

var makeArcSeg = function(angStart, angEnd, rSeg, nThick){
  var path = NSBezierPath.bezierPath()
  var aPts = computeLargeBezierArc(angStart, angEnd, rSeg)
  var nP = aPts.length
  for(var j = 0; j < nP; j++){
    if(j == 0) {[path moveToPoint:NSMakePoint(aPts[0].aBeg[0], aPts[0].aBeg[1])]}
    [path curveToPoint:NSMakePoint(aPts[j].aEnd[0], aPts[j].aEnd[1]) controlPoint1:NSMakePoint(aPts[j].cPt1[0], aPts[j].cPt1[1]) controlPoint2:NSMakePoint(aPts[j].cPt2[0], aPts[j].cPt2[1])]
  }
  if (nThick > 1) {
    var rIn = rSeg - nThick
    var aPt2 = computeLargeBezierArc(angEnd, angStart, rIn)
    n2 = aPt2.length
    for(var k = 0; k < n2; k++){
      if(k == 0) {[path lineToPoint:NSMakePoint(aPt2[0].aBeg[0], aPt2[0].aBeg[1])]}
      [path curveToPoint:NSMakePoint(aPt2[k].aEnd[0], aPt2[k].aEnd[1]) controlPoint1:NSMakePoint(aPt2[k].cPt1[0], aPt2[k].cPt1[1]) controlPoint2:NSMakePoint(aPt2[k].cPt2[0], aPt2[k].cPt2[1])]
    }
    [path closePath]
  }
  return MSShapeGroup.shapeWithBezierPath(path);
}

var makeBasePlate = function(r, nThick){
  var shape = makeArcSeg(0, 2 * pi, r, nThick)
  var c = getNeutralColor()
  c.alpha = 0.002
  var fill = shape.style().addStylePartOfType(0)
  fill.color = c
  shape.setName("Base plate")
  return shape
}

var rd2dec = function(num) {
    return Math.round(num * 100) / 100;
}

var preProcSeg = function(aSegments, angOmit){
  //normalize list arbitrary string numbers as distr. of a total of angRange
  var aSegs = [0]
  var total = 0;
  var n = aSegments.length;
  var i = n;
  var angRange = (2 * pi) - angOmit
  var angCor = (angOmit > 0) ? pi - (angOmit / 2) : 0 //rotate the circle to have the gap on bottom
  while (i--) {total += parseInt(aSegments[i])}
  var factor = angRange / total
  for (i=1; i<=n; i++) {aSegs.push(aSegs[i-1] + (parseInt(aSegments[i-1]) * factor))}
  aSegs[aSegs.length - 1] = angRange
  return aSegs
}

var deg2rdns = function(angDeg) {
  return angDeg * (2 * pi / 360)
}

var alert = function(sText, sTitle) {
	[[NSApplication sharedApplication] displayDialog:sText withTitle:sTitle];
    //doc.showMessage(sText)
}

var getViewF = function(){
    //get position with view.postion.x etc and size with view.size.width etc.
    view = [doc currentView];
    return [view frame];
}

var styleShape = function(shapeGr, msC){
    var border = shapeGr.style().addStylePartOfType(1)
    border.color = msC;
    border.thickness = 2;
}

var styleShapeArea = function(shapeGr, msC){
    var fill = shapeGr.style().addStylePartOfType(0);
    fill.color = msC;
    var border = shapeGr.style().addStylePartOfType(1);
    border.color = MSColor.colorWithSVGString("#ffffff");
    border.thickness = .25;
    border.position = 1;
}

var placeLayer = function(lyr){
    var rL = lyr.rect();
    var v = getViewF();
    var so = [doc scrollOrigin];
    var zv = [doc zoomValue]
    var vX = (v.size.width / 2 - so.x) / zv;
    var vY = (v.size.height / 2 - so.y) / zv;
    rL.origin.x = vX
    rL.origin.y = vY
    lyr.setRect(rL)
    rszHndls(lyr)
}

var rszHndls = function(lyr){
  if(sv <= 34400) {
    lyr.resizeRoot(true)
  } else {
    lyr.resizeToFitChildrenWithOption(0)
  }
}

var getRnCol = function(aUsedSoFar){
  var aCols = ["#B71C1C","#e91e63","#9c27b0","#673ab7","#3f51b5","#2196f3","#0288D1","#00bcd4","#00bcd4","#4caf50","#8bc34a","#cddc39","#F9A825","#FF8F00","#F57C00","#D84315","#795548","#9e9e9e","#607d8b"]
  var c
  if((aUsedSoFar) && (aUsedSoFar.length < aCols.length)){
    do {
  		c = aCols[Math.floor(Math.random() * aCols.length)]
  	} while(aUsedSoFar.indexOf(c) != -1)
    aUsedSoFar.push(c)
  } else {
    c = aCols[Math.floor(Math.random() * aCols.length)]
  }
  var msc = MSColor.colorWithSVGString(c);
  //msc.alpha = 0.99
  return msc
}

var getNeutralColor = function(){
  var msc = MSColor.colorWithSVGString("#455A64");
  //msc.alpha = 0.99
  return msc
}

var showDlg = function(sMsg, sInfo, aFields, sBtnGoText){
  var dlg = COSAlertWindow.new()
  dlg.setMessageText(sMsg || "Plugin dialog")
	dlg.setInformativeText(sInfo || "To run this plugin more data will be needed")
  for(var i = 0; i < aFields.length; i++){
    dlg.addTextLabelWithValue(aFields[i].label.toString() || ("Field " + i))
  	dlg.addTextFieldWithValue(aFields[i].data.toString()  || ("Data " + i))
  }
	dlg.addButtonWithTitle( sBtnGoText || 'OK')
	dlg.addButtonWithTitle('Cancel')
  var aResults = []
	if(dlg.runModal() == 1000) {
    for(var i = 1; i < aFields.length * 2; i+=2) {
      aResults.push(dlg.viewAtIndex(i).stringValue().toString()) //only every other, we don't care about labels
    }
  }
  //alert(aResults,"Returning this array from dialog:")
  return aResults
}

var getSkVer = function() {
	var v = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"]
	var v2 = v.split('.').join("")
	do {
		v2 = v2 + "0"
	} while(v2.length <= 4)
	return (Number(v2) + 0)
}

var resetToDef = function() {
  var def = [NSUserDefaults standardUserDefaults]
  [def removeObjectForKey:"gb_segCircle_dsh"]
  [def removeObjectForKey:"gb_segCircle_tix"]
  [def removeObjectForKey:"gb_segCircle_var"]
  [def removeObjectForKey:"gb_segCircle_seg"]
}
